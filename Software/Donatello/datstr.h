#ifndef __STASTR_H
#define __STASTR_H
/*****************************迪文屏写数据和请求度数据*************************/
                                                  /*   地址    数据*/ 
static uint8_t DwinWrite[8] = {0x5A,0xa5,0x05,0x82,0x00,0x00,0x00,0x00};
static uint8_t DwinRead[7]  = {0x5A,0xa5,0x04,0x83,0x00,0x00,0x01};
static uint8_t DLT_wakeup[4] ={0xfe,0xfe,0xfe,0xfe};

/*****************************************电能表数据请求***********************************/
const static char DReadAdd[12] = {0X68,0XAA,0XAA,0XAA,0XAA,0XAA,0XAA,0X68,0X13,0X00,0XDF,0X16};    // 请求获取电能表的通信地址
const static char ReadVol[16]  = {0X68,0XAA,0XAA,0XAA,0XAA,0XAA,0XAA,0X68,0X11,0X04,0X33,0X34,0x34,0x35,0xB1,0x16};  //请求读取通过电能表的电压
const static char ReadCur[16]  = {0X68,0XAA,0XAA,0XAA,0XAA,0XAA,0XAA,0X68,0X11,0X04,0X33,0X34,0x35,0x35,0xB2,0x16};  //请求读取通过流过电能表的电能
const static char ReadEng[16]  = {0X68,0XAA,0XAA,0XAA,0XAA,0XAA,0XAA,0X68,0X11,0X04,0X33,0X33,0x34,0x33,0xAE,0x16};  //请求读取通过电能表的电能

/**************************************迪文屏的数据请求***************************************/
static uint8_t ReadAdd[6] = {0x5a,0xa5,0x03,0x81,0x03,0x02};            // 读取当前图片的地址
static uint8_t ReadCash[7] = {0x5a,0xa5,0x04,0x83,0x00,0x5a,01};         //请求读取设置的押金
static uint8_t ReadPri[7] = {0x5a,0xa5,0x04,0x83,0x00,0x59,01};         //请求读取当时充电单价
static uint8_t Exchang[6] = {0x5a,0xa5,0x04,0x80,0x00,0x00};            // 从当前界面切换到指定地址
static uint8_t ShowPileAdd[7] = {0x5a,0xa5,0x04,0x83,0x00,0x59,0x01};   //请求读取桩地址
                                                     //地址  1个字数据长度
static uint8_t ShowPri[8] = {0x5a,0xa5,0x05,0x82,0x00,0x00,0x00,0x00};  //显示当前电的单价，地址00 00  单价 00 00
                                                    /*    地址        单价     */
static uint8_t ShowBal[8] = {0x5a,0xa5,0x05,0x82,0x00,0x01,0x00,0x00};   //显示IC卡余额，地址00 01  余额 00 00
                                                    /*    地址        余额     */
static uint8_t ShowTron[8] = {0x5a,0xa5,0x05,0x82,0x00,0x03,0x00,0x00};  //显示可充电量，地址00 03   电量 00 00
                                                    /*    地址        电量     */
static uint8_t ShowVal[8] = {0x5a,0xa5,0x05,0x82,0x00,0x10,0x00,0x00};   //显示充电电压，地址00 10    电压 00 00
                                                    /*    地址        电压    */
static uint8_t ShowCur[8] = {0x5a,0xa5,0x05,0x82,0x00,0x11,0x00,0x00};   //显示充电电流，地址00 11    电流 00 00
                                                    /*    地址        电流    */
static uint8_t ShowEle[8] = {0x5a,0xa5,0x05,0x82,0x00,0x12,0x00,0x00};   //显示消费电量，地址00 12    电量 00 00
                                                    /*    地址        电量    */
static uint8_t ShowCost[8] = {0x5a,0xa5,0x05,0x82,0x00,0x13,0x00,0x00};  //显示消费金额，地址00 13    金额 00 00
                                                    /*    地址        金额    */
static uint8_t ShowChargHour[8] = {0x5a,0xa5,0x05,0x82,0x00,0x77,0x00,0x00};  //显示充电时间   地址00 0c    充电时间   时
                                                        /*    地址          时    */
static uint8_t ShowChargMinute[8] = {0x5a,0xa5,0x05,0x82,0x00,0x78,0x00,0x00};  //显示充电时间，地址00 0b    充电时间   分
                                                        /*    地址          分   */
const static uint8_t AccordAmtCharg[8] = {0XB0,0XB4,0XBD,0XF0,0XB6,0XEE,0XB3,0XE4};         // "按金额充"
const static uint8_t AccordTimCharg[8] = {0XB0,0XB4,0Xca,0Xb1,0XBc,0XE4,0XB3,0XE4};         // "按时间充"
const static uint8_t AccordEleCharg[8] = {0XB0,0XB4,0Xb5,0Xe7,0Xc1,0Xbf,0XB3,0XE4};         // "按电量充"
const static uint8_t FullBatteCharg[8] = {0XB3,0XB4,0XC2,0XFA,0XB5,0XE7,0XB3,0XD8};         // "充满电池"

/************************************************CAN通信的数据****************************************************/
static uint8_t CANReadPri[8] = {0x01,0x03,0x00,0x00,0x00,0x00,0x00,0x02};        // 读桩数据   桩状态  电价
static uint8_t CANReadCar[8] = {0x01,0x04,0x00,0x00,0x00,0x00,0x00,0x05};        // 读卡状态和数据
static uint8_t CANReadExp[8] = {0x01,0x05,0x00,0x00,0x00,0x00,0x00,0x04};        // 读取消费电量  消费金额
static uint8_t CANReadBal[8] = {0x01,0x06,0x00,0x00,0x00,0x00,0x00,0x07};        // 读取卡内金额
static uint8_t CANReadTim[8] = {0x01,0x07,0x00,0x00,0x00,0x00,0x00,0x06};        // 读取时间

static uint8_t CANConStar[8] = {0x01,0x02,0x00,0x00,0x00,0xff,0x00,0xfc};         //  控制桩启动
static uint8_t CANConStop[8] = {0x01,0x02,0x00,0x00,0x00,0x00,0xff,0xfc};         //  控制桩停止

/***************************************************卡的相关数据******************************************/
static uint8_t const CardPassword[8] = {0x11,0x22,0x33,0x44,0x55,0x66};            // 读卡器密码
static uint8_t  LoadKey[22] = {0xaa,0x4c,0x12,0x00,0x01,0x14,0x8a,0xc5,0xe2,0x28,0x28,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x40,0xf6,0xfa};   // 下载密码到读卡器
static uint8_t  Request[5] = {0xaa,0x41,0x01,0x01,0xeb};                          // 寻卡                 
static uint8_t  Anticoll[9] = {0xaa,0x42,0x05,0x00,0x00,0x00,0x00,0x00,0xed};     // 防冲突
static uint8_t  Select[8] = {0xaa,0x43,0x04};             //选卡
static uint8_t  Authentication[6] = {0xaa,0x44,0x02,0x00,0x01,0xed};       //   验证密码
static uint8_t  Halt[4] = {0xaa,0x45,0x00,0xef};           // 停卡      
static uint8_t  ReadCardData[5] = {0xaa,0x46,0x01,0x04,0xe9};    //  读低四块的数据，即1扇区0块的数据
static uint8_t  ReadCardFlag[5] = {0xaa,0x46,0x01,0x05,0xe8};    //  读低五块的数据，即1扇区1块的数据       读标志位 
static uint8_t  WriteNormalData[21] = {0xaa,0x47,0x11,0x04,0x00,0x00,0x00,0xaa,0xbb,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe9};       //往第四块里面写入16字节的数据
static uint8_t  WriteAbnormalData[21] = {0xaa,0x47,0x11,0x04,0x00,0x00,0x00,0xbb,0xaa,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe9};     //往第四块里面写入16字节的数据
#endif                                     /* 47：控制码  11：长度   04：地址*/
